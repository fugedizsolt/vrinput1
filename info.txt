20201228:
	- ez alapján készült működő projekt
		- STEAM VR - The Ultimate VR developer guide - PART 1
			- https://www.youtube.com/watch?v=5C6zr4Q5AlA
	- Unity: 2019.4.17f1
	- SteamVR Unity Plugin - v2.5 (sdk 1.8.19)
		- ezt importáltam az asset store-ból most
	- az input dolgok csak akkor működnek, ha a Steam is fut
	- nem működött a VSCode-ban a kód kiegészítés...
		- a VSCode output ablakban látszott, hogy nem tudta betölteni valami proj fájlokat, de ott volt a megoldás, hogy töltsem le a .NET SDK Framework 4.7.1-et, letöltöttem install, logoff/logon és ment :)
	- hihetetlen, de a navSphere irányítás rotáción kívül megvan :)

20201230:
	- végre sikerült kitalálni, hogy kell a rotation-t kiszámolni
	- nagyot lendített, hogy készítettem egy debug canvas-t nagy nehezen a VR GUI-hoz :)
	- van még baj
		- a chaperone-nak tudom állítani a rotation értékét, a vrcamera-nak nem, mert azt a hmd mozgatja... :)
		- ha viszont chaperone rotation értékét állítom, akkor a "roll" mozgás egészen furcsa
			- ezért valahogy azt kellene szimulálni, hogy a rotation-t a hmd két szemem közti centeren végezném
			- ez egy eltolás, egy rotáció, majd egy visszatolás
			- ehhez kell hozzáadni a forward-right-up elmozdulásokat...
				- ez úgy tűnik ok, de az elején valamiért a chaperone position leugrik, egyből a földszintre esek...
		- a VR posInfo alapján kiderült, hogy eddig teljesen kihagytam a yaw mozgást, azaz bólintást egyáltalán nem számolok
			- ez érdekes probléma megint
			- ha letámasztom a controllert az asztalon, és mozgatom a fejem, akkor a lefthand controller position és rotation értékei magmaradnak
				- de ha mozgok a térben (azaz a Player position-t mozgatom), akkor ugyanannyival mozdul el a lefthand controller position értéke is
			- tehát, ha eltárolom a start-kor a hmdPosition-t és a lefthand position-t (plusz rotációt), akkor 
				- a tényleges térbeli lefthand elmozdulás= (lefthand position - startlefthand position - (hmdPos-hmdPosStart))
			- CONTORLLER INFO: fix controller pozíció mellett (az asztalon fix-en mozdulatlan)
				- ha mozgatom a fejem, akkor a lekérdezhető controller pozíció és rotáció nem változik
				- ha mozgatom a hmd.transform.position-t, akkor a lekérdezhető controller pozíció pontosan annyival változik, mint amennyivel a hmd.transform.position
				- azaz a controller igazi worldspace koordináta és rotáció

20210101:
	- hihetetlen
	- VR nélkül szépen megy minden, de VR-ban mintha rossz helyen lenne a hmd
	- a lefthand controller diff értékei szépen olvashatók
	- ezt nem hiszem el:
		- a vr prg-ben kiírtam a chp-hmd és chp-hand position diff-et
		- szépen látszott, hogy hiába mozgott a chp, a hmd és a hand relativ pos-ok szépen ugyanazok
		- az is látszott, hogy a hmd-hand InverseTransformPoint fgv valami furcsa értéket ad, ha forgatom a controllert, tök más értékeket ad, szóval ezt nem lehet használni (egyenlőre)
		- az is látszott, hogy ha z tengely körül forgok (controllert jobbra-balra csavargatom), akkor a chp y koord kb ugyanaz marad, az x koord nagyon mozog
			- és valahogy a chp 0,0,0 pozíciója körül foroghat a hmd-ben a világ...
			- ez lehetetlen, mert ugyanezt szimuláltam nem-vr-ben... el sem tudom képzelni mi lehet a hiba...

20200102:
	- jó tesztet találtam ki, csak 1 irányt nézek és simán a szöget állítom, nem quateriont
	- matek a InverseTransformPoint és TransformPoint fgv mögött:
		- https://forum.unity.com/threads/whats-the-math-behind-transform-transformpoint.107401/
			- Transform.InverseTransformPoint math:
				var diference = (GO.position - transform.position);
				var FinalPos = Quaternion.Inverse(transform.rotation)*Vector3(diference.x / transform.lossyScale.x,diference.y / transform.lossyScale.y,diference.z / transform.lossyScale.z);
			- transform.TransformPoint(myVector) math:
				- transform.rotation*Vector3.Scale(myVector,transform.localScale) + transform.position;
	- saját InverseTransformPoint-t készítek scale nélkül:
		- ugyanaz az eredmény, nem ott fordul a chaperone, ahol kellene...
	- KÉSZEN VAN!!! gyönyörűen működik az összes funkció, szépen mozgok a térben, ahogy szeretnék
		- arányokon még módosítani kell, gyorsulásokat kezelni, de ez már csak részlet :)
	- a lényeg az volt, hogy
		- NEM SZÁMOLNI SEMMIYLEN relatív értéket (transzláció, rotáció), elég a localPosition és localRotation-höz viszonyítani a relatív mozgást
		- ha egy adott objektumon pl rotációt módosítok, akkor az a child objektumokra egyből hat
		- a chp pozíció-rotáció módosításakor tényleg csak a kamera elmozdulás worldCoord-ot kellett kompenzálni
